from base_reporter import BaseReporter
from openai import OpenAI
import os
from core.redis.upstash_driver import decrement_token_quota
class AIReporter(BaseReporter):
    def __init__(self,result, repo, token):
        super().__init__(result,repo,token)
        self.client = OpenAI(api_key=f"{os.getenv('OPENAI_API_KEY')}")
    def generate_feedback(self):
        candidate_code = """\
            def add(a, b):
                return a + b
            """

        test_results = {
            "base": self.result.base_results,
            "bonus": self.result.bonus_results,
            "penalty": self.result.penalty_results,
            "score": self.result.final_score
        }

        system_prompt = (

            "VocÃª Ã© um revisor de cÃ³digo especialista. VocÃª acabou de receber a soluÃ§Ã£o de um candidato "
            "para um desafio de cÃ³digo. O desafio Ã© de implementar uma calculadora em JavaScript com Node.js"
            " Seu trabalho Ã© fornecer um feedback amigÃ¡vel, humano e motivador com base nos "
            "testes de unidade que passaram e falharam. VocÃª elogiarÃ¡ o que Ã© bom, destacarÃ¡ problemas de forma gentil "
            "e incentivarÃ¡ o candidato a melhorar. Seu tom Ã© casual, empÃ¡tico, humano e construtivo. "
            "VocÃª deve retornar respostas formatadas em markdown, isso Ã© obrigatÃ³rio. "
            "A resposta deve ser apenas em direÃ§Ã£o ao candidato, sem mencionar o revisor ou o sistema."
            "Em momento algum vocÃª deve mencionar a existÃªncia de testes unitÃ¡rios sendo executados por um sistema de avaliaÃ§Ã£o automatizado. "
            "VocÃª deve fornecer o feedback sem citar a presenÃ§a de teste, mostrando que vocÃª Ã© simplesmente um revisor que realmente leu o cÃ³digo do candidato e estÃ¡ fornecendo feedback sobre ele."
        )

        user_prompt = f"""
            Nome do aluno: {self.result.author}
            ### ğŸ§ª CÃ³digo submetido:

            ```python
            {self.result.submission_file}
            ```

            ### ğŸ“Š Resultados dos testes:

            **Testes base:**  
            {test_results['base']}

            **Testes bÃ´nus:**  
            {test_results['bonus']}

            **Testes de penalidade:**  
            {test_results['penalty']}

            **PontuaÃ§Ã£o final:** {test_results['score']}/100

            Por favor, forneÃ§a um feedback amigÃ¡vel, humano e motivador.
            A resposta deve ser apenas em direÃ§Ã£o ao candidato, sem mencionar o revisor ou o sistema.
            ForneÃ§a toda a resposta em uma estrutura bem feita em markdown com elementos de tÃ­tulos, indentaÃ§Ã£o e listas.Markdown Ã© obrigatÃ³rio.
            Lembre-se de em nenhum momento mencionar a existÃªncia de testes unitÃ¡rios sendo executados por um sistema de avaliaÃ§Ã£o automatizado.
            VocÃª deve agir como um revisor que realmente leu o cÃ³digo do candidato e estÃ¡ fornecendo feedback sobre ele.
            NÃ£o se esqueÃ§a de divulgar a nota final do candidato, que Ã© {self.result.final_score}/100. A nota deve ser apresentada antes de sua anÃ¡lise e de forma objetiva.
            """

        response = self.client.chat.completions.create(model="gpt-3.5-turbo",
                                                  messages=[
                                                      {"role": "system", "content": system_prompt},
                                                      {"role": "user", "content": user_prompt}
                                                  ],
                                                  temperature=0.7)
        feedback = response.choices[0].message.content
        return feedback


