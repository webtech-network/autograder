from core.report.base_reporter import BaseReporter
from openai import OpenAI
import os

class AIReporter(BaseReporter):
    def __init__(self,result,token,quota,openai_key=None):
        super().__init__(result,token)
        self.client = OpenAI(api_key=openai_key)
        self.quota = quota
    def generate_feedback(self, student_quota=10):
        candidate_code = """\
            def add(a, b):
                return a + b
            """

        test_results = {
            "base": self.result.base_results,
            "bonus": self.result.bonus_results,
            "penalty": self.result.penalty_results["passed"],
            "score": self.result.final_score
        }


        system_prompt = (

            "Voc√™ √© um revisor de c√≥digo especialista. Voc√™ acabou de receber a solu√ß√£o de um candidato "
            "para um desafio de c√≥digo. O desafio √© de implementar um servidor em Node.js utilizando o framework Express.js. "
            "O usu√°rio deve implementar um servidor que responda a requisi√ß√µes HTTP GET e POST, "
            "e deve implementar as rotas necess√°rias para atender aos requisitos do desafio. "
            "Seu trabalho √© fornecer um feedback amig√°vel, humano e motivador com base nos erros detectados no c√≥digo do candidato. "
            "Voc√™ deve apontar todos os erros encontrados no c√≥digo, analis√°-los detalhadamente e explicar como o candidato pode corrigi-los para atingir uma nota melhor. "
            "Al√©m disso, voc√™ deve fazer uma an√°lise geral do c√≥digo submetido, destacando pontos positivos e negativos, como nomes de vari√°veis, estrutura do c√≥digo, organiza√ß√£o, etc. "
            "Seu tom deve ser casual, emp√°tico, humano e construtivo. "
            "Voc√™ deve retornar respostas formatadas em markdown, isso √© obrigat√≥rio. "
            "A resposta deve ser apenas em dire√ß√£o ao candidato, sem mencionar o revisor ou o sistema. "
            "Em momento algum voc√™ deve mencionar a exist√™ncia de testes unit√°rios sendo executados por um sistema de avalia√ß√£o automatizado. "
            "Voc√™ deve fornecer o feedback como se fosse um revisor que realmente leu o c√≥digo do candidato e est√° fornecendo feedback sobre ele."
        )

        user_prompt = f"""
            Nome do aluno: {self.result.author}
            ### üß™ C√≥digo submetido:

            ```python
            {self.result.submission_file}
            ```

            ### üìä Resultados dos testes:

            **Testes passados:**
            {test_results['base']['passed']}

            **Testes falhados:**
            {test_results['base']['failed']}

            **Testes b√¥nus passados:**
            {test_results['bonus']['passed']}

            **Penalidades detectadas:**
            {test_results['penalty']}

            ### üìù Instru√ß√µes para o feedback:

            - Aponte todos os erros detectados no c√≥digo do aluno, explicando detalhadamente o que est√° errado e como ele pode corrigir.
            - Fa√ßa uma an√°lise geral do c√≥digo submetido, destacando pontos positivos e negativos, como nomes de vari√°veis, estrutura do c√≥digo, organiza√ß√£o, etc.
            - Forne√ßa orienta√ß√µes claras e pr√°ticas para o candidato melhorar seu c√≥digo e atingir uma nota melhor.
            - Seja amig√°vel, humano e motivador em seu tom.
            - Retorne o feedback em uma estrutura bem feita em markdown com elementos de t√≠tulos, indenta√ß√£o e listas. Markdown √© obrigat√≥rio.
            - N√£o mencione a exist√™ncia de testes unit√°rios ou sistemas automatizados de avalia√ß√£o.
            - Mostre que voc√™ leu o c√≥digo do candidato, apontando pequenos detalhes espec√≠ficos do c√≥digo.
            - Divulgue a nota final do candidato de forma objetiva antes de sua an√°lise.

            **Nota final:** {test_results['score']}/100
        """

        response = self.client.chat.completions.create(model="gpt-3.5-turbo",
                                                  messages=[
                                                      {"role": "system", "content": system_prompt},
                                                      {"role": "user", "content": user_prompt}
                                                  ],
                                                  temperature=0.7)
        ai_quota = f"Voc√™ tem {self.quota} cr√©ditos restantes para usar o sistema de feedback AI.\n"
        feedback = ai_quota + response.choices[0].message.content
        return feedback

    @classmethod
    def create(cls, result, token, quota, openai_key=None):
        """Factory method to create an AIReporter instance."""
        response = cls(result, token, quota,openai_key)
        response.get_repository()
        return response

