from core.report.base_reporter import BaseReporter
from openai import OpenAI
import os

class AIReporter(BaseReporter):
    def __init__(self,result,token,quota,openai_key=None):
        super().__init__(result,token)
        self.client = OpenAI(api_key=openai_key)
        self.quota = quota

    def generate_feedback(self):
        test_results = {
            "base": self.result.base_results,
            "bonus": self.result.bonus_results,
            "penalty": self.result.penalty_results["passed"],
            "score": self.result.final_score
        }

        # --- PROMPT DO SISTEMA OTIMIZADO ---
        # Foco em ser um tutor que guia o aluno pela corre√ß√£o dos erros.
        system_prompt = (
            "Voc√™ √© um tutor de programa√ß√£o especialista e amig√°vel. Sua principal miss√£o √© ajudar um estudante a entender por que seu c√≥digo falhou em um desafio e como ele pode corrigi-lo. "
            "O desafio √© implementar um servidor Express.js em Node.js. "
            "Sua tarefa mais importante √© analisar os 'Testes Falhados' e, com base neles, explicar os erros conceituais no c√≥digo do aluno. "
            "Seja emp√°tico, did√°tico e motivador. Use um tom casual e construtivo. "
            "Formate sua resposta obrigatoriamente em markdown, como se fosse uma conversa com o aluno. "
            "Nunca mencione a exist√™ncia de um sistema de avalia√ß√£o automatizado ou 'testes unit√°rios'. Em vez disso, trate os 'testes falhos' como 'pontos que n√£o foram atendidos' ou 'requisitos a serem corrigidos'."
            "O seu feedback deve ser uma an√°lise de c√≥digo genu√≠na, como se voc√™ mesmo tivesse lido e executado o c√≥digo."
        )

        # --- PROMPT DO USU√ÅRIO OTIMIZADO ---
        # Estrutura mais clara e instru√ß√µes diretas para focar nos erros.
        user_prompt = f"""
            Ol√°! Por favor, prepare um feedback para o(a) estudante: {self.result.author}.

            A nota final foi: **{test_results['score']}/100**.

            ---
            ### üéØ Requisitos que Precisam de Aten√ß√£o (Testes Falhados)
            Estes s√£o os pontos mais importantes que n√£o foram atendidos no c√≥digo. Sua an√°lise deve come√ßar por aqui.
            ```json
            {test_results['base']['failed']}
            ```

            ---
            ### ‚úÖ Requisitos Atendidos (Testes Passados)
            ```json
            {test_results['base']['passed']}
            ```

            ---
            ### üöÄ C√≥digo Enviado pelo Aluno
            ```typescript
            {self.result.submission_file}
            ```

            ---
            ### üìù Instru√ß√µes para o Feedback:

            1.  **FOCO OBRIGAT√ìRIO:** Comece sua an√°lise abordando os **'Requisitos que Precisam de Aten√ß√£o'**. Para cada um deles, explique em detalhes por que o c√≥digo do aluno n√£o atendeu ao requisito. Mostre o trecho exato do c√≥digo que est√° causando o problema e forne√ßa uma sugest√£o clara de como corrigi-lo. Esta √© a parte mais cr√≠tica do seu feedback.
            2.  **An√°lise Geral:** Ap√≥s cobrir todos os pontos de falha, fa√ßa uma an√°lise geral do c√≥digo. Comente sobre boas pr√°ticas, como a organiza√ß√£o do c√≥digo, nomes de vari√°veis e estrutura. Se houver pontos positivos, mesmo que o c√≥digo n√£o tenha passado em tudo, elogie-os para motivar.
            3.  **Tom e Formato:** Mantenha um tom amig√°vel e encorajador. Use markdown para estruturar bem o feedback com t√≠tulos, listas e blocos de c√≥digo.
            4.  **Seja um Mentor:** Aja como um revisor s√™nior que est√° guiando um j√∫nior, e n√£o como um programa de computador.
            5.  **Estiliza√ß√£o:** Use emojis e formata√ß√£o em markdown para tornar o feedback mais envolvente e f√°cil de ler. Por exemplo, use ‚úÖ para testes passados, ‚ùå para testes falhados, etc.
            """

        response = self.client.chat.completions.create(
            model="gpt-3.5-turbo",  # Revertido para o modelo original
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            temperature=0.7  # Revertido para a temperatura original
        )

        ai_quota = f"Voc√™ tem {self.quota} cr√©ditos restantes para usar o sistema de feedback AI.\n"
        feedback = ai_quota + response.choices[0].message.content
        return feedback

    @classmethod
    def create(cls, result, token, quota, openai_key=None):
        """Factory method to create an AIReporter instance."""
        response = cls(result, token, quota,openai_key)
        response.get_repository()
        return response

