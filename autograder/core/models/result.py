from typing import List
from autograder.core.models.test_result import TestResult

from pydantic import BaseModel, Field

class Result(BaseModel):
    """
    Represents the result of an assignment submission.
    Contains a final score generated by the Scorer class and the Graders.
    Allows different report generation methods for feedback.
    """

    final_score: float
    author: str
    subsmission_file: List[str] = Field(default_factory=list, alias="subsmission_file")
    base_results: List[TestResult] = Field(default_factory=list)
    bonus_result: List[TestResult] = Field(default_factory=list)
    penalty_result: List[TestResult] = Field(default_factory=list)

    model_config = {"populate_by_name": True}

    def get_test_report(self) -> List[TestResult]:
        return self.base_results + self.bonus_result + self.penalty_result

    def __repr__(self) -> str:
        lines = [
            "Result Summary:",
            f"  Author: {self.author}",
            f"  Submission Files:",
        ]
        for file in self.submission_files:
            lines.append(f"       - {file}")
        lines.append(f"  Final Score: {self.final_score:.2f}")
        lines.append(f"  Base Results: {len(self.base_results)} tests")
        lines.append(f"  Bonus Results: {len(self.bonus_results)} tests")
        lines.append(f"  Penalty Results: {len(self.penalty_results)} tests")
        content = "\n".join(lines)
        width = max(len(line) for line in lines)
        border = "+" + "-" * (width + 2) + "+"
        result = [border]
        for line in lines:
            result.append(f"| {line.ljust(width)} |")
        result.append(border)
        return "\n".join(result)
