"""Result module."""

from typing import List

from autograder.core.models.test_result import TestResult


class Result:
    """
    Represents the result of an assignment submission.
    Contains a final score generated by the Scorer class and the Graders.
    Allows different report generation methods for feedback.
    """

    def __init__(
        self,
        final_score,
        author,
        submission_file,
        base_results: List[TestResult],
        bonus_results: List[TestResult],
        penalty_results: List[TestResult],
    ):
        self.final_score = final_score
        self.author = author
        self.submission_files = submission_file
        self.base_results = base_results
        self.bonus_results = bonus_results
        self.penalty_results = penalty_results

    def get_test_report(self) -> List[TestResult]:
        return self.base_results + self.bonus_results + self.penalty_results

    def __repr__(self):
        lines = [
            "Result Summary:",
            f"  Author: {self.author}",
            "  Submission Files:",
        ]
        for file in self.submission_files:
            lines.append(f"       - {file}")
        lines.append(f"  Final Score: {self.final_score:.2f}")
        lines.append(f"  Base Results: {len(self.base_results)} tests")
        lines.append(f"  Bonus Results: {len(self.bonus_results)} tests")
        lines.append(f"  Penalty Results: {len(self.penalty_results)} tests")
        content = "\n".join(lines)
        width = max(len(line) for line in lines)
        border = "+" + "-" * (width + 2) + "+"
        result = [border]
        for line in lines:
            result.append(f"| {line.ljust(width)} |")
        result.append(border)
        return "\n".join(result)
