{
  "base_tests": [
    {
      "CREATE: Cria agentes corretamente": [
        "Parabéns! Seu endpoint para criar agentes (`POST /agentes`) está funcionando perfeitamente, retornando o status `201 Created` e os dados do agente recém-criado. Ótimo trabalho!",
        "A criação de agentes (`POST /agentes`) não está conforme o esperado. O teste esperava um status `201 Created` e os dados do agente no corpo da resposta. Verifique a lógica da sua rota para garantir que o agente é salvo e a resposta é formatada corretamente."
      ]
    },
    {
      "READ: Lista todos os agente corretamente": [
        "Excelente! Seu endpoint para listar agentes (`GET /agentes`) está retornando uma lista válida com status `200 OK`. Isso é fundamental para a funcionalidade de listagem.",
        "A listagem de agentes (`GET /agentes`) não está correta. O teste esperava um status `200 OK` e um array de agentes. Certifique-se de que sua rota está buscando e retornando todos os agentes de forma adequada."
      ]
    },
    {
      "READ: Busca agente por ID corretamente": [
        "Muito bem! A busca de agentes por ID (`GET /agentes/:id`) está funcionando como esperado, retornando o agente correto com status `200 OK`. A recuperação de dados individuais é crucial.",
        "A busca de agente por ID (`GET /agentes/:id`) falhou. O teste esperava um status `200 OK` e o objeto do agente correspondente ao ID. Verifique a lógica de busca e o tratamento de IDs na sua rota."
      ]
    },
    {
      "UPDATE: Atualiza dados do agente com por completo (com PUT) corretamente": [
        "Perfeito! A atualização completa de agentes (`PUT /agentes/:id`) está funcionando. Os dados são atualizados e a rota responde com `200 OK`, confirmando as mudanças. Bom uso do método PUT!",
        "A atualização completa de agentes (`PUT /agentes/:id`) não funcionou. O teste esperava um status `200 OK` e o agente com os dados atualizados. Verifique se sua rota está recebendo o payload completo e substituindo os dados existentes corretamente."
      ]
    },
    {
      "UPDATE: Atualiza dados do agente com por completo (com PATCH) corretamente": [
        "Excelente! A atualização parcial de agentes (`PATCH /agentes/:id`) está implementada corretamente. Você consegue atualizar campos específicos e a rota responde com `200 OK`. Isso demonstra flexibilidade na API.",
        "A atualização parcial de agentes (`PATCH /agentes/:id`) falhou. O teste esperava um status `200 OK` e o agente com os dados parcialmente atualizados. Verifique se sua rota está recebendo o payload parcial e aplicando as mudanças sem sobrescrever o objeto inteiro."
      ]
    },
    {
      "DELETE: Deleta dados de agente corretamente": [
        "Ótimo trabalho! A exclusão de agentes (`DELETE /agentes/:id`) está funcionando perfeitamente, retornando um status `204 No Content` e removendo o agente da base de dados. O gerenciamento de recursos está completo.",
        "A exclusão de agente (`DELETE /agentes/:id`) não funcionou como esperado. O teste esperava um status `204 No Content` e que o agente fosse realmente removido. Verifique a lógica de exclusão na sua rota."
      ]
    },
    {
      "CREATE: Recebe status code 400 ao tentar criar agente com payload em formato incorreto": [
        "Muito bem! Seu endpoint de criação de agentes está validando o payload de entrada, retornando `400 Bad Request` para dados incorretos. Isso é essencial para a robustez da API.",
        "Seu endpoint de criação de agentes (`POST /agentes`) não está validando payloads incorretos. O teste enviou dados inválidos e esperava um status `400 Bad Request`, mas recebeu outro. Implemente uma validação robusta para os dados de entrada."
      ]
    },
    {
      "READ: Recebe status 404 ao tentar buscar um agente inexistente": [
        "Correto! A busca por agentes não encontrados (`GET /agentes/:id`) está retornando `404 Not Found`. Isso é a resposta padrão para recursos inexistentes.",
        "Ao tentar buscar um agente com ID inexistente (`GET /agentes/:id`), o teste não recebeu `404 Not Found`. Sua rota deve ser capaz de identificar que o recurso não existe e retornar o status apropriado."
      ]
    },
    {
      "UPDATE: Recebe status code 400 ao tentar atualizar agente por completo com método PUT e payload em formato incorreto": [
        "Excelente! A atualização completa de agentes (`PUT /agentes/:id`) está rejeitando payloads inválidos com `400 Bad Request`. Isso garante a integridade dos dados.",
        "Sua rota de atualização completa de agentes (`PUT /agentes/:id`) não está retornando `400 Bad Request` para payloads inválidos. Garanta que a validação de dados ocorra antes da tentativa de atualização."
      ]
    },
    {
      "UPDATE: Recebe status code 404 ao tentar atualizar agente por completo com método PUT de agente inexistente": [
        "Perfeito! A atualização completa de agentes (`PUT /agentes/:id`) para um ID inexistente está retornando `404 Not Found`. Isso é um bom tratamento de erro para recursos não encontrados.",
        "Ao tentar atualizar um agente inexistente com `PUT /agentes/:id`, o teste não recebeu `404 Not Found`. A rota deve indicar que o recurso não foi encontrado."
      ]
    },
    {
      "UPDATE: Recebe status code 400 ao tentar atualizar objeto parcialmente com método PATCH e payload em formato incorreto": [
        "Muito bem! A atualização parcial de agentes (`PATCH /agentes/:id`) está validando payloads e retornando `400 Bad Request` para dados incorretos. Isso evita inconsistências.",
        "Sua rota de atualização parcial de agentes (`PATCH /agentes/:id`) não está retornando `400 Bad Request` para payloads inválidos. A validação de dados é crucial para o método PATCH."
      ]
    },
    {
      "UPDATE: Recebe status code 404 ao tentar atualizar agente por parcialmente com método PATCH de agente inexistente": [
        "Correto! A atualização parcial de agentes (`PATCH /agentes/:id`) para um ID inexistente está retornando `404 Not Found`. Continue assim, com bom tratamento de erros!",
        "Ao tentar atualizar um agente inexistente com `PATCH /agentes/:id`, o teste não recebeu `404 Not Found`. Certifique-se de que sua rota verifica a existência do recurso antes de tentar a atualização."
      ]
    },
    {
      "DELETE: Recebe status code 404 ao tentar deletar agente inexistente": [
        "Excelente! A exclusão de agentes com IDs inexistentes (`DELETE /agentes/:id`) está retornando `404 Not Found`. Um bom tratamento de erros para operações de exclusão.",
        "Ao tentar deletar um agente com ID inexistente (`DELETE /agentes/:id`), o teste não recebeu `404 Not Found`. Sua rota deve sinalizar quando o recurso a ser deletado não é encontrado."
      ]
    },
    {
      "CREATE: Cria casos corretamente": [
        "Parabéns! Seu endpoint para criar casos (`POST /casos`) está funcionando corretamente, retornando `201 Created` e os dados do caso. A criação de novos casos é um pilar do sistema!",
        "A criação de casos (`POST /casos`) não está como o esperado. O teste esperava um status `201 Created` e os dados do caso no corpo da resposta. Revise a lógica da sua rota de criação de casos."
      ]
    },
    {
      "Lista todos os casos corretamente": [
        "Ótimo! Seu endpoint para listar casos (`GET /casos`) está retornando uma lista válida com status `200 OK`. A capacidade de ver todos os casos é essencial.",
        "A listagem de casos (`GET /casos`) não está correta. O teste esperava um status `200 OK` e um array de casos. Certifique-se de que sua rota está buscando e retornando todos os casos de forma adequada."
      ]
    },
    {
      "READ: Busca caso por ID corretamente": [
        "Muito bem! A busca de casos por ID (`GET /casos/:id`) está funcionando como esperado, retornando o caso correto com status `200 OK`. A recuperação de detalhes de um caso específico é importante.",
        "A busca de caso por ID (`GET /casos/:id`) falhou. O teste esperava um status `200 OK` e o objeto do caso correspondente ao ID. Verifique a lógica de busca e o tratamento de IDs na sua rota."
      ]
    },
    {
      "UPDATE: Atualiza dados de um caso com por completo (com PUT) corretamente": [
        "Perfeito! A atualização completa de casos (`PUT /casos/:id`) está funcionando. Os dados são atualizados e a rota responde com `200 OK`, confirmando as mudanças. Boa implementação do PUT!",
        "A atualização completa de casos (`PUT /casos/:id`) não funcionou. O teste esperava um status `200 OK` e o caso com os dados atualizados. Verifique se sua rota está recebendo o payload completo e substituindo os dados existentes corretamente."
      ]
    },
    {
      "UPDATE: Atualiza dados de um caso parcialmente (com PATCH) corretamente": [
        "Excelente! A atualização parcial de casos (`PATCH /casos/:id`) está implementada corretamente. Você consegue atualizar campos específicos e a rota responde com `200 OK`. Isso demonstra flexibilidade na API de casos.",
        "A atualização parcial de casos (`PATCH /casos/:id`) falhou. O teste esperava um status `200 OK` e o caso com os dados parcialmente atualizados. Verifique se sua rota está recebendo o payload parcial e aplicando as mudanças sem sobrescrever o objeto inteiro."
      ]
    },
    {
      "DELETE: Deleta dados de um caso corretamente": [
        "Ótimo trabalho! A exclusão de casos (`DELETE /casos/:id`) está funcionando perfeitamente, retornando um status `204 No Content` e removendo o caso da base de dados. O gerenciamento de casos está sob controle.",
        "A exclusão de caso (`DELETE /casos/:id`) não funcionou como esperado. O teste esperava um status `204 No Content` e que o caso fosse realmente removido. Verifique a lógica de exclusão na sua rota."
      ]
    },
    {
      "CREATE: Recebe status code 400 ao tentar criar caso com payload em formato incorreto": [
        "Muito bem! Seu endpoint de criação de casos está validando o payload de entrada, retornando `400 Bad Request` para dados incorretos. Isso protege a integridade dos seus dados.",
        "Seu endpoint de criação de casos (`POST /casos`) não está validando payloads incorretos. O teste enviou dados inválidos e esperava um status `400 Bad Request`, mas recebeu outro. Implemente uma validação robusta para os dados de entrada."
      ]
    },
    {
      "CREATE: Recebe status code 404 ao tentar criar caso com id de agente inválido/inexistente": [
        "Correto! Ao tentar criar um caso com um `agente_id` que não existe, sua API retorna `404 Not Found`. Isso demonstra um bom gerenciamento de relacionamentos entre entidades.",
        "Ao tentar criar um caso com um `agente_id` inexistente, o teste não recebeu `404 Not Found`. Sua API deve ser capaz de identificar que o agente referenciado não existe e retornar o status apropriado."
      ]
    },
    {
      "READ: Recebe status code 404 ao tentar buscar um caso por ID inválido": [
        "Excelente! A busca por casos não encontrados (`GET /casos/:id`) está retornando `404 Not Found`. Isso é a resposta padrão para recursos inexistentes.",
        "Ao tentar buscar um caso com ID inexistente (`GET /casos/:id`), o teste não recebeu `404 Not Found`. Sua rota deve ser capaz de identificar que o recurso não existe e retornar o status apropriado."
      ]
    },
    {
      "UPDATE: Recebe status code 400 ao tentar atualizar um caso por completo com método PUT com payload em formato incorreto": [
        "Perfeito! A atualização completa de casos (`PUT /casos/:id`) está rejeitando payloads inválidos com `400 Bad Request`. Isso garante a integridade dos dados de casos.",
        "Sua rota de atualização completa de casos (`PUT /casos/:id`) não está retornando `400 Bad Request` para payloads inválidos. Garanta que a validação de dados ocorra antes da tentativa de atualização."
      ]
    },
    {
      "UPDATE: Recebe status code 404 ao tentar atualizar um caso por completo com método PUT de um caso inexistente": [
        "Muito bem! A atualização completa de casos (`PUT /casos/:id`) para um ID inexistente está retornando `404 Not Found`. Bom tratamento de erro para recursos não encontrados.",
        "Ao tentar atualizar um caso inexistente com `PUT /casos/:id`, o teste não recebeu `404 Not Found`. A rota deve indicar que o recurso não foi encontrado."
      ]
    },
    {
      "UPDATE: Recebe status code 404 ao tentar atualizar um caso parcialmente com método PATCH de um caso inexistente": [
        "Correto! A atualização parcial de casos (`PATCH /casos/:id`) para um ID inexistente está retornando `404 Not Found`. Continue assim, com bom tratamento de erros!",
        "Ao tentar atualizar um caso inexistente com `PATCH /casos/:id`, o teste não recebeu `404 Not Found`. Certifique-se de que sua rota verifica a existência do recurso antes de tentar a atualização."
      ]
    },
    {
      "DELETE: Recebe status code 404 ao tentar deletar um caso inexistente": [
        "Excelente! A exclusão de casos com IDs inexistentes (`DELETE /casos/:id`) está retornando `404 Not Found`. Um bom tratamento de erros para operações de exclusão.",
        "Ao tentar deletar um caso com ID inexistente (`DELETE /casos/:id`), o teste não recebeu `404 Not Found`. Sua rota deve sinalizar quando o recurso a ser deletado não é encontrado."
      ]
    }
  ],
  "bonus_tests": [
    {
      "Simple Filtering: Estudante implementou endpoint de filtragem de caso por status corretamente": [
        "Parabéns! Você implementou a filtragem de casos por status (`GET /casos?status=...`) corretamente. Isso adiciona uma funcionalidade poderosa à sua API para gerenciar casos.",
        "A filtragem de casos por status (`GET /casos?status=...`) não funcionou como esperado. Verifique se sua rota `/casos` consegue receber o parâmetro `status` na query string e filtrar os resultados com base nele."
      ]
    },
    {
      "Simple Filtering: Estudante implementou endpoint de filtragem de caso por agente corretamente": [
        "Ótimo! A filtragem de casos por `agente_id` (`GET /casos?agente_id=...`) está funcionando corretamente. Isso permite listar casos específicos de cada agente.",
        "A filtragem de casos por agente (`GET /casos?agente_id=...`) falhou. Certifique-se de que sua rota `/casos` consegue receber o parâmetro `agente_id` na query string e retornar apenas os casos associados a esse agente."
      ]
    },
    {
      "Simple Filtering: Estudante implementou endpoint de filtragem de casos por keywords no título e/ou descrição": [
        "Excelente! Você implementou a busca por palavras-chave (`GET /casos?q=...`) no título e/ou descrição dos casos. Essa funcionalidade de busca livre é um grande diferencial para a usabilidade da API.",
        "A filtragem de casos por palavras-chave (`GET /casos?q=...`) no título ou descrição não está funcionando. Verifique se sua rota `/casos` consegue receber o parâmetro `q` e realizar a busca de texto dentro dos campos `titulo` e `descricao`."
      ]
    },
    {
      "Complex Filtering: Estudante implementou endpoint de filtragem de agente por data de incorporacao com sorting em ordem crescente corretamente": [
        "Impressionante! Você implementou a ordenação de agentes por data de incorporação em ordem crescente (`GET /agentes?sort=dataDeIncorporacao`). Essa funcionalidade de ordenação é uma característica avançada e muito útil!",
        "A ordenação de agentes por data de incorporação em ordem crescente (`GET /agentes?sort=dataDeIncorporacao`) não funcionou. Verifique se sua rota `/agentes` consegue receber o parâmetro `sort=dataDeIncorporacao` e retornar os agentes ordenados corretamente."
      ]
    },
    {
      "Complex Filtering: Estudante implementou endpoint de filtragem de agente por data de incorporacao com sorting em ordem decrescente corretamente": [
        "Perfeito! A ordenação de agentes por data de incorporação em ordem decrescente (`GET /agentes?sort=-dataDeIncorporacao`) está funcionando. Essa flexibilidade na ordenação é um grande bônus para a API.",
        "A ordenação de agentes por data de incorporação em ordem decrescente (`GET /agentes?sort=-dataDeIncorporacao`) não funcionou. Verifique se sua rota `/agentes` consegue receber o parâmetro `sort=-dataDeIncorporacao` e retornar os agentes ordenados inversamente."
      ]
    },
    {
      "Custom Error: Estudante implementou mensagens de erro customizadas para argumentos de agente inválidos corretamente": [
        "Uau! Você implementou mensagens de erro customizadas para argumentos inválidos em agentes, com status `400 Bad Request` e detalhes específicos dos campos. Isso é uma excelente prática para APIs, fornecendo feedback claro aos desenvolvedores. Parabéns!",
        "As mensagens de erro customizadas para argumentos inválidos em agentes não foram detectadas. Ao enviar um payload malformado para `POST /agentes` ou `PUT/PATCH /agentes/:id`, sua API deve retornar um `JSON` com a estrutura `{\"status\": 400, \"message\": \"Parâmetros inválidos\", \"errors\": [...]}` indicando os campos inválidos."
      ]
    },
    {
      "Custom Error: Estudante implementou mensagens de erro customizadas para argumentos de caso inválidos corretamente": [
        "Excelente! As mensagens de erro customizadas para argumentos inválidos em casos estão funcionando, com status `400 Bad Request` e detalhes específicos dos campos. Isso demonstra um alto nível de atenção aos detalhes na sua API.",
        "As mensagens de erro customizadas para argumentos inválidos em casos não foram detectadas. Ao enviar um payload malformado para `POST /casos` ou `PUT/PATCH /casos/:id`, sua API deve retornar um `JSON` com a estrutura `{\"status\": 400, \"message\": \"Parâmetros inválidos\", \"errors\": [...]}` indicando os campos inválidos."
      ]
    }
  ],
  "penalty_tests": [
    {
      "Validation: ID utilizado para agentes não é UUID": [
        "**Penalidade:** O ID gerado para agentes **não é um UUID**. É crucial que os IDs sejam UUIDs para garantir unicidade global e evitar colisões. Ajuste a forma como os IDs são gerados para seguir o padrão UUID.",
        "Atenção: O ID gerado para agentes **não é um UUID**. É crucial que os IDs sejam UUIDs para garantir unicidade global e evitar colisões. Ajuste a forma como os IDs são gerados para seguir o padrão UUID."
      ]
    },
    {
      "Validation: Consegue registrar um agente com dataDeIncorporacao em formato invalido (não é YYYY-MM,DD)": [
        "**Penalidade:** Sua API permitiu o registro de um agente com `dataDeIncorporacao` em formato inválido. A validação do formato `YYYY-MM-DD` é essencial para a integridade dos dados.",
        "**Penalidade:** Sua API permitiu o registro de um agente com `dataDeIncorporacao` em formato inválido. A validação do formato `YYYY-MM-DD` é essencial para a integridade dos dados."
      ]
    },
    {
      "Validation: Consegue registrar agente com data de incorporação no futuro": [
        "**Penalidade:** Sua API permitiu o registro de um agente com uma `dataDeIncorporacao` no futuro. Datas de incorporação não devem ser futuras. Implemente uma validação para impedir isso.",
        "**Penalidade:** Sua API permitiu o registro de um agente com uma `dataDeIncorporacao` no futuro. Datas de incorporação não devem ser futuras. Implemente uma validação para impedir isso."
      ]
    },
    {
      "Validation: Consegue registrar agente com nome vazio": [
        "**Penalidade:** Sua API permitiu o registro de um agente com `nome` vazio. Campos obrigatórios como o nome não devem ser aceitos se estiverem vazios.",
        "**Penalidade:** Sua API permitiu o registro de um agente com `nome` vazio. Campos obrigatórios como o nome não devem ser aceitos se estiverem vazios."
      ]
    },
    {
      "Validation: Consegue registrar agente com data vazia": [
        "**Penalidade:** Sua API permitiu o registro de um agente com `dataDeIncorporacao` vazia. Campos obrigatórios como a data não devem ser aceitos se estiverem vazios.",
        "**Penalidade:** Sua API permitiu o registro de um agente com `dataDeIncorporacao` vazia. Campos obrigatórios como a data não devem ser aceitos se estiverem vazios."
      ]
    },
    {
      "Validation: Consegue registrar agente com cargo vazio": [
        "**Penalidade:** Sua API permitiu o registro de um agente com `cargo` vazio. Campos obrigatórios como o cargo não devem ser aceitos se estiverem vazios.",
        "**Penalidade:** Sua API permitiu o registro de um agente com `cargo` vazio. Campos obrigatórios como o cargo não devem ser aceitos se estiverem vazios."
      ]
    },
    {
      "Validation: ID utilizado para casos não é UUID": [
        "**Penalidade:** O ID gerado para casos **não é um UUID**. É crucial que os IDs sejam UUIDs para garantir unicidade global e evitar colisões. Ajuste a forma como os IDs são gerados para seguir o padrão UUID.",
        "Atenção: O ID gerado para casos **não é um UUID**. É crucial que os IDs sejam UUIDs para garantir unicidade global e evitar colisões. Ajuste a forma como os IDs são gerados para seguir o padrão UUID."
      ]
    },
    {
      "Validation: Consegue criar um caso com título vazio": [
        "**Penalidade:** Sua API permitiu a criação de um caso com `titulo` vazio. Títulos são campos obrigatórios e não devem ser aceitos se estiverem em branco.",
        "**Penalidade:** Sua API permitiu a criação de um caso com `titulo` vazio. Títulos são campos obrigatórios e não devem ser aceitos se estiverem em branco."
      ]
    },
    {
      "Validation: Consegue criar um caso com descrição vazia": [
        "**Penalidade:** Sua API permitiu a criação de um caso com `descricao` vazia. Descrições são campos importantes e não devem ser aceitas se estiverem em branco.",
        "**Penalidade:** Sua API permitiu a criação de um caso com `descricao` vazia. Descrições são campos importantes e não devem ser aceitas se estiverem em branco."
      ]
    },
    {
      "Validation: Consegue registrar caso com agente inexistente": [
        "**Penalidade:** Sua API permitiu o registro de um caso com um `agente_id` que não existe no sistema. A integridade referencial é fundamental. Um caso só deve ser criado se o agente associado for válido.",
        "**Penalidade:** Sua API permitiu o registro de um caso com um `agente_id` que não existe no sistema. A integridade referencial é fundamental. Um caso só deve ser criado se o agente associado for válido."
      ]
    },
    {
      "Validation: Consegue atualizar um caso com status que não seja 'aberto' ou 'solucionado'": [
        "**Penalidade:** Sua API permitiu a atualização de um caso com um `status` que não é 'aberto' ou 'solucionado'. O campo de status deve ter valores restritos. Implemente uma validação para garantir apenas os valores permitidos.",
        "**Penalidade:** Sua API permitiu a atualização de um caso com um `status` que não é 'aberto' ou 'solucionado'. O campo de status deve ter valores restritos. Implemente uma validação para garantir apenas os valores permitidos."
      ]
    },
    {
      "Static files: projeto não contém dependências obrigatórias": [
        "**Penalidade:** Seu arquivo `package.json` não lista as dependências obrigatórias (`express`, `swagger-jsdoc`, `swagger-ui-express`) ou contém dependências extras além das permitidas para este projeto. Verifique se o `package.json` está correto e tem apenas as dependências necessárias.",
        "**Penalidade:** Seu arquivo `package.json` não lista as dependências obrigatórias (`express`, `swagger-jsdoc`, `swagger-ui-express`) ou contém dependências extras além das permitidas para este projeto. Verifique se o `package.json` está correto e tem apenas as dependências necessárias."
      ]
    },
    {
      "Static files: .gitignore não contém pasta node_modules": [
        "**Penalidade:** Seu arquivo `.gitignore` **não** está ignorando a pasta `node_modules`. Esta pasta não deve ser versionada no Git. Adicione `node_modules/` ao seu `.gitignore`.",
        "**Penalidade:** Seu arquivo `.gitignore` **não** está ignorando a pasta `node_modules`. Esta pasta não deve ser versionada no Git. Adicione `node_modules/` ao seu `.gitignore`."
      ]
    },
    {
      "Static files: usuário não possui arquivo para documentação swagger": [
        "**Penalidade:** Não foi encontrado o arquivo de documentação Swagger (`swagger.json` ou `swagger.yaml`) na pasta `docs/`. A documentação da API é um requisito importante.",
        "**Penalidade:** Não foi encontrado o arquivo de documentação Swagger (`swagger.json` ou `swagger.yaml`) na pasta `docs/`. A documentação da API é um requisito importante."
      ]
    },
    {
      "Static files: usuário não seguiu estrutura de arquivos à risca": [
        "**Penalidade:** A estrutura de arquivos do seu projeto não está seguindo as diretrizes. Verifique se as pastas `docs/`, `routes/`, `controllers/`, `repositories/` e os arquivos `.gitignore`, `package.json`, `server.json` estão presentes e organizados conforme o esperado.",
        "**Penalidade:** A estrutura de arquivos do seu projeto não está seguindo as diretrizes. Verifique se as pastas `docs/`, `routes/`, `controllers/`, `repositories/` e os arquivos `.gitignore`, `package.json`, `server.json` estão presentes e organizados conforme o esperado."
      ]
    }
  ]
}