from openai import OpenAI
import os
client = OpenAI(api_key=f"{os.getenv('OPENAI_API_KEY')}")


candidate_code = """\
def add(a, b):
    return a + b
"""


test_results = {
    "base": {
        "test_add_positive_numbers": "passed",
        "test_add_negative_numbers": "failed"
    },
    "bonus": {
        "test_add_floats": "passed"
    },
    "penalty": {
        "test_add_strings": "passed"
    },
    "score": 65
}

system_prompt = (
    "VocÃª Ã© um revisor de cÃ³digo especialista. VocÃª acabou de receber a soluÃ§Ã£o de um candidato "
    "para um desafio de cÃ³digo. Seu trabalho Ã© fornecer um feedback amigÃ¡vel, humano e motivador com base nos "
    "testes de unidade que passaram e falharam. VocÃª elogiarÃ¡ o que Ã© bom, destacarÃ¡ problemas de forma gentil "
    "e incentivarÃ¡ o candidato a melhorar. Seu tom Ã© casual, empÃ¡tico, humano e construtivo. "
    "VocÃª deve retornar respostas formatadas em markdown, isso Ã© obrigatÃ³rio. "
    "A resposta deve ser apenas em direÃ§Ã£o ao candidato, sem mencionar o revisor ou o sistema."
)

user_prompt = f"""
### ğŸ§ª CÃ³digo submetido:

```python
{candidate_code}
```

### ğŸ“Š Resultados dos testes:

**Testes base:**  
{test_results['base']}

**Testes bÃ´nus:**  
{test_results['bonus']}

**Testes de penalidade:**  
{test_results['penalty']}

**PontuaÃ§Ã£o final:** {test_results['score']}%

Por favor, forneÃ§a um feedback amigÃ¡vel, humano e motivador.
A resposta deve ser apenas em direÃ§Ã£o ao candidato, sem mencionar o revisor ou o sistema.
ForneÃ§a toda a resposta em uma estrutura bem feita em markdown com elementos de tÃ­tulos, indentaÃ§Ã£o e listas.Markdown Ã© obrigatÃ³rio.
"""

response = client.chat.completions.create(model="gpt-3.5-turbo",
messages=[
    {"role": "system", "content": system_prompt},
    {"role": "user", "content": user_prompt}
],
temperature=0.7)

print(response.choices[0].message.content)
with open("report.txt", "a") as file:
    file.write(str(response.usage.total_tokens))